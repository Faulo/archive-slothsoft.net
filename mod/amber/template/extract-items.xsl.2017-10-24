<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0"	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"	xmlns:str="http://exslt.org/strings"	xmlns:func="http://exslt.org/functions"	xmlns:exsl="http://exslt.org/common"	extension-element-prefixes="str func exsl"> 	<xsl:key name="dictionary-option" match="dictionary/entry/option" use="../@name"/>		<xsl:key name="spells-misc" match="dictionary[@name='spells-misc']/single/@value" use="../@name"/>	<xsl:key name="spells-white" match="dictionary[@name='spells-white']/single/@value" use="../@name"/>	<xsl:key name="spells-blue" match="dictionary[@name='spells-blue']/single/@value" use="../@name"/>	<xsl:key name="spells-green" match="dictionary[@name='spells-green']/single/@value" use="../@name"/>	<xsl:key name="spells-black" match="dictionary[@name='spells-black']/single/@value" use="../@name"/>		<func:function name="func:getValue">		<xsl:param name="key"/>		<xsl:param name="item" select="."/>				<func:result select="$item//*[@name = $key]/@value"/>	</func:function>	<func:function name="func:getItems">		<xsl:param name="nodeList"/>		<func:result>			<xsl:apply-templates select="$nodeList" mode="item"/>		</func:result>	</func:function>		<xsl:template match="/data">		<xsl:variable name="itemFragment" select="exsl:node-set(func:getItems(//*[@template='tabs']/*))"/>		<xsl:for-each select="$itemFragment/item/@type[not(. = following::item/@type)]">			<xsl:sort select="."/>			<category name="{.}">				<xsl:copy-of select="$itemFragment/item[@type = current()]"/>			</category>		</xsl:for-each>	</xsl:template>		<xsl:template match="*" mode="item">	<!--$mapping['id'] 		= 'Item #';$mapping['image'] 	= 'Itemgfx #';$mapping['name'] 	= 'Name';$mapping['type'] 	= 'Item Art';$mapping['hands'] 	= 'H채nde';$mapping['fingers'] = 'Finger';$mapping['damage'] 	= 'Schaden';$mapping['armor'] 	= 'Schutz';$mapping['weight'] 	= 'Gewicht';$mapping['gender'] 	= 'Geschlecht';$mapping['class'] 	= 'Klassen';$mapping['lp-max'] 	= 'LP-Max.';$mapping['sp-max'] 	= 'SP-Max.';$mapping['magic-weapon'] 	= 'M-B-W';$mapping['magic-armor'] 	= 'M-B-R';$mapping['attribute-name'] 	= 'Attribut Art';$mapping['attribute-value'] 	= 'Attribut Wert';$mapping['skill-name'] 	= 'F채higkeits Art';$mapping['skill-value'] 	= 'F채higkeits Wert';	-->		<item id="{position()}">			<xsl:variable name="spell-type" select="func:getValue('spell-type')"/>			<xsl:variable name="spell-id" select="func:getValue('spell-id')"/>						<xsl:for-each select=".//single[@name != '']">				<xsl:attribute name="{@name}"><xsl:value-of select="@value"/></xsl:attribute>			</xsl:for-each>			<xsl:for-each select=".//select[@dict]">				<xsl:variable name="option" select="key('dictionary-option', @dict)[@key = current()/@value]"/>				<!--<xsl:attribute name="{@name}-id"><xsl:value-of select="@value"/></xsl:attribute>-->				<xsl:attribute name="{@name}"><xsl:value-of select="$option/@title | $option/@val[not($option/@title)]"/></xsl:attribute>			</xsl:for-each>			<xsl:if test="$spell-id &gt; 0">				<xsl:choose>					<xsl:when test="$spell-type = 0">						<xsl:attribute name="spell-name"><xsl:value-of select="key('spells-white', $spell-id)"/></xsl:attribute>					</xsl:when>					<xsl:when test="$spell-type = 1">						<xsl:attribute name="spell-name"><xsl:value-of select="key('spells-blue', $spell-id)"/></xsl:attribute>					</xsl:when>					<xsl:when test="$spell-type = 2">						<xsl:attribute name="spell-name"><xsl:value-of select="key('spells-green', $spell-id)"/></xsl:attribute>					</xsl:when>					<xsl:when test="$spell-type = 3">						<xsl:attribute name="spell-name"><xsl:value-of select="key('spells-black', $spell-id)"/></xsl:attribute>					</xsl:when>					<xsl:when test="$spell-type = 6">						<xsl:attribute name="spell-name"><xsl:value-of select="key('spells-misc', $spell-id)"/></xsl:attribute>					</xsl:when>				</xsl:choose>			</xsl:if>			<xsl:for-each select=".//mask[@dict='ItemProperties']/bit[@value != '']">				<xsl:attribute name="is-{@name}"/>			</xsl:for-each>			<xsl:attribute name="gender">				<xsl:choose>					<xsl:when test="func:getValue('male') &gt; func:getValue('female')">m채nnlich</xsl:when>					<xsl:when test="func:getValue('male') &lt; func:getValue('female')">weiblich</xsl:when>					<xsl:otherwise>beide</xsl:otherwise>				</xsl:choose>			</xsl:attribute>			<xsl:for-each select=".//mask[@name='classes']/bit[@value != '']">				<class name="{@name}"/>			</xsl:for-each>			<!--<xsl:copy-of select="."/>-->		</item>	</xsl:template></xsl:stylesheet>