<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0"	xmlns="http://www.w3.org/1999/xhtml"	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"	xmlns:str="http://exslt.org/strings"	extension-element-prefixes="str"> 	<xsl:key name="dictionary-option" match="dictionary/entry/option" use="../@name"/>		<xsl:key name="item" match="item" use="@id"/>		<xsl:variable name="items" select="/data/*[@data-cms-name = 'items']/fragment"/>	<xsl:variable name="portraits" select="/data/*[@data-cms-name = 'portraits']/fragment"/>			<xsl:template match="/data">		<div class="Amber Editor">			<script type="application/javascript"><![CDATA[function AmberEditor(rootNode) {	this.rootNode = rootNode;	this.init();}AmberEditor.prototype = Object.create(	Object.prototype, {		rootNode : { writable : true },		init : {			value : function() {				try {					let nodeList = this.rootNode.querySelectorAll("*[data-template='tabs'] > label > select");					for (let i = 0; i < nodeList.length; i++) {						nodeList[i].addEventListener(							"change",							this.changeSectionEvent,							false						);						nodeList[i].disabled = false;						//nodeList[i].dispatchEvent(new Event("change"));						this.changeSectionEvent.call(nodeList[i]);					}				} catch(e) {					this.rootNode.textContent = e.message;				}			}		},		changeSectionEvent : {			value : function(eve) {				try {					let parentNode = this.parentNode.parentNode.lastChild;					for (let i = 0; i < parentNode.childNodes.length; i++) {						parentNode.childNodes[i].hidden = (i !== parseInt(this.value));					}				} catch(e) {					this.parentNode.textContent = e.message;				}			}		}	});window.addEventListener(	"DOMContentLoaded",	function(eve) {		let node = document.querySelector(".Amber");		let editor = new AmberEditor(node);	},	false);var AmberPicker = {	closePopup : function(eve) {		try {			let popupNode = document.querySelector(".Amber .popup");			if (popupNode) {				while (popupNode.hasChildNodes()) {					popupNode.removeChild(popupNode.lastChild);				}			}		} catch(e) {			alert(e);		}	},	openPopup : function(eve) {		try {			this.closePopup(eve);						let buttonNode = eve.currentTarget;			let menuNode = buttonNode.contextMenu;			let popupNode = document.querySelector(".Amber .popup");			if (popupNode) {				let entryType = buttonNode.getAttribute("contextmenu");				let entryId = buttonNode.querySelector("input").value;				if (entryType && entryId) {					let entryNode = document.getElementById(entryType + "-" + entryId);					if (entryNode && entryNode.content) {						let articleNode = document.importNode(entryNode.content, true);						if (articleNode) {							popupNode.appendChild(articleNode);						}					}				}			}		} catch(e) {			alert(e);		}	},	openMenu : function(eve) {		try {			let pickerNode = document.activeElement;			let menuNode = eve.currentTarget;						let targetNodeList = pickerNode.querySelectorAll("*[data-picker-value]");						for (let i = 0; i < targetNodeList.length; i++) {				let targetNode = targetNodeList[i];								let name = targetNode.getAttribute("class");				let value = targetNode.getAttribute("data-picker-value");								let itemNode = menuNode.querySelector("*[data-picker-name = '" + name + "']");								if (itemNode) {					switch (itemNode.type) {						case "checkbox":							itemNode.checked = (value !== "");							break;						case "radio":							let filterName = "data-picker-filter-" + name.toLowerCase();							let itemNodeList = menuNode.querySelectorAll("*[data-picker-name = '" + name + "']");							itemNodeList.forEach(								(node) => {									node.checked = false;									node.disabled = false;									node.parentNode.hidden = false;								},							);														if (pickerNode.hasAttribute(filterName)) {								let filterValue = pickerNode.getAttribute(filterName);								itemNodeList.forEach(									(node) => {										node.parentNode.hidden = true;									}								);								itemNodeList.forEach(									(node) => {										if (filterValue === node.getAttribute(filterName)) {											node.parentNode.hidden = false;										} else {											node.disabled = true;										}									},								);							}														itemNode = menuNode.querySelector("*[data-picker-name = '" + name + "'][data-picker-value = '" + value + "']");														if (itemNode) {								itemNode.checked = true;							}							break;						default:							break;					}				}			}		} catch(e) {			alert(e);		}	},	closeMenu : function(eve) {		try {			let pickerNode = document.activeElement;			let itemNode = eve.currentTarget;						let name = itemNode.getAttribute("data-picker-name");						let targetNode = pickerNode.querySelector("." + name);			let inputNode = pickerNode.querySelector("." + name + " input");						if (targetNode && inputNode) {				let value;				switch (itemNode.type) {					case "checkbox":						value = itemNode.checked;												targetNode.setAttribute("data-picker-value", value ? "1" : "");						inputNode.checked = value;						break;					case "radio":					default:						value = itemNode.getAttribute("data-picker-value");												targetNode.setAttribute("data-picker-value", value);						inputNode.value = value;						break;				}			}						switch(name) {				case "ItemId":					pickerNode.setAttribute("data-hover-text", itemNode.getAttribute("label"));					break;			}		} catch(e) {			alert(e);		}	},};			]]></script>			<!--			<style type="text/css">				<xsl:for-each select="//dictionary/entry[@image-uri]">					<xsl:variable name="selector" select="concat('*[data-dictionary=&quot;', @name, '&quot;]')"/>					<xsl:for-each select="key('dictionary-option', @name)">						<xsl:value-of select="concat($selector, '[data-picker-value=&quot;', @key, '&quot;]::after { background-image: url(', ../@image-uri, @key, '); }')"/>					</xsl:for-each>				</xsl:for-each>			</style>						-->			<menu type="context" id="amber-picker-portrait" onshow="AmberPicker.openMenu(arguments[0])">				<menuitem label="Ambermoon Portrait Picker" icon="/getResource.php/slothsoft/favicon"/>				<xsl:call-template name="menu.items">					<xsl:with-param name="fragment" select="$portraits"/>					<xsl:with-param name="name" select="'PortraitId'"/>				</xsl:call-template>			</menu>			<menu type="context" id="amber-picker-item" onshow="AmberPicker.openMenu(arguments[0])">				<menuitem label="Ambermoon Item Picker" icon="/getResource.php/slothsoft/favicon"/>				<menu label="Gegenstand">					<xsl:call-template name="menu.items">						<xsl:with-param name="fragment" select="$items"/>						<xsl:with-param name="name" select="'ItemId'"/>					</xsl:call-template>				</menu>				<menu label="Anzahl">					<xsl:for-each select="str:split(str:padding(101), '')">						<xsl:variable name="val">							<xsl:choose>								<xsl:when test="position() = last()">									<xsl:value-of select="255"/>								</xsl:when>								<xsl:otherwise>									<xsl:value-of select="position() - 1"/>								</xsl:otherwise>							</xsl:choose>						</xsl:variable>						<menuitem type="radio" radiogroup="Amount"							label="{$val}"							data-picker-name="Amount" data-picker-value="{$val}"							onclick="AmberPicker.closeMenu(arguments[0])"/>					</xsl:for-each>				</menu>				<menuitem data-picker-name="Identified"					type="checkbox"					label="Ist Identifiziert"					onclick="AmberPicker.closeMenu(arguments[0])"/>				<menuitem data-picker-name="Broken"					type="checkbox"					label="Ist Zerbrochen"					onclick="AmberPicker.closeMenu(arguments[0])"/>				<menu label="Magische Ladungen">					<xsl:for-each select="str:split(str:padding(101), '')">						<xsl:variable name="val">							<xsl:choose>								<xsl:when test="position() = last()">									<xsl:value-of select="255"/>								</xsl:when>								<xsl:otherwise>									<xsl:value-of select="position() - 1"/>								</xsl:otherwise>							</xsl:choose>						</xsl:variable>						<menuitem type="radio" radiogroup="Charge"							label="{$val}"							data-picker-name="Charge" data-picker-value="{$val}"							onclick="AmberPicker.closeMenu(arguments[0])"/>					</xsl:for-each>				</menu>			</menu>						<!--			<form action="upload.php" method="post" enctype="multipart/form-data">				<div class="Upload">					<table>						<tr>							<th colspan="2">Spielstand hochladen</th>						</tr>						<tr>							<th>Party_char.amb</th>							<td><input name="FILE_CHARS" type="file" class="yellow" /></td>						</tr>						<tr>							<th>Party_data.sav</th>							<td><input name="FILE_PARTY" type="file" class="yellow" /></td>						</tr>						<tr>							<th colspan="2" class="Submit"><input type="submit" value="Hochladen" /></th>						</tr>					</table>				</div>			</form>			-->						<xsl:apply-templates select="*[@data-cms-name='editor']/savegame"/>						<xsl:apply-templates select="*[@data-cms-name='itemlist-content']//*[@data-item-id]"/>			<xsl:apply-templates select="*[@data-cms-name='portraitlist-content']//*[@data-portrait-id]"/>			<div class="popup" onclick="AmberPicker.closePopup(arguments[0])"/>		</div>	</xsl:template>		<xsl:template match="*[@data-item-id]">		<template id="amber-picker-item-{@data-item-id}">			<xsl:copy-of select="."/>		</template>	</xsl:template>		<xsl:template match="*[@data-portrait-id]">		<template id="amber-picker-portrait-{@data-portrait-id}">			<xsl:copy-of select="."/>		</template>	</xsl:template>		<xsl:template name="menu.items">		<xsl:param name="fragment"/>		<xsl:param name="name"/>				<xsl:for-each select="$fragment/category">			<menu label="{@name}">				<xsl:for-each select="*">					<!--icon="/getResource.php/amber/items/{@id}"-->					<menuitem label="{@name}"						type="radio" radiogroup="{$name}"						data-picker-name="{$name}" data-picker-value="{@id}" data-picker-filter-itemid="{@slot}"						onclick="AmberPicker.closeMenu(arguments[0])"/>				</xsl:for-each>			</menu>		</xsl:for-each>	</xsl:template>						<xsl:template match="savegame">		<!--		<details>			<summary>				<h2>Aktuelle Konfiguration: <span class="green"><xsl:value-of select="@mode"/></span></h2>			</summary>			<form action="." method="GET">				<div>					<button value="slothsoft" name="SaveDefault" type="submit">Konfiguration laden: <span class="yellow">slothsoft</span></button>				</div>				<div>					<button value="thalion" name="SaveDefault" type="submit">Konfiguration laden: <span class="yellow">thalion</span></button>				</div>			</form>		</details>		-->		<xsl:for-each select="file">			<details>				<summary>					<h2>Datei bearbeiten: <span class="green"><xsl:value-of select="@name"/></span></h2>				</summary>				<form action="." method="POST">					<input value="{../@id}" name="SaveName" type="hidden" />					<input value="{../@mode}" name="SaveDefault" type="hidden" />					<button name="SaveAll" type="submit" class="yellow">Zwischenspeichern</button>					<button name="DownloadFile" type="submit" class="yellow" value="{@name}">Download</button>					<xsl:apply-templates select="*" mode="form"/>				</form>			</details>		</xsl:for-each>	</xsl:template>		<xsl:template match="*[@template]" mode="form">		<xsl:choose>			<xsl:when test="@template = 'details'">				<details>					<xsl:apply-templates select="." mode="form-attributes"/>					<summary>						<xsl:apply-templates select="." mode="form-name"/>					</summary>					<xsl:apply-templates select="." mode="form-content"/>				</details>			</xsl:when>			<xsl:when test="@template = 'tabs'">				<div>					<xsl:apply-templates select="." mode="form-attributes"/>					<label>						<xsl:apply-templates select="." mode="form-name"/>						<select class="command" disabled="disabled">							<xsl:for-each select="key('dictionary-option', @dict)">								<option value="{@key}">									<xsl:value-of select="@val"/>								</option>							</xsl:for-each>						</select>					</label>					<ul>						<xsl:for-each select="*">							<li>								<div>									<xsl:apply-templates select="." mode="form-attributes"/>									<xsl:apply-templates select="." mode="form-content"/>								</div>							</li>						</xsl:for-each>					</ul>				</div>			</xsl:when>			<xsl:when test="@template = 'item' or @template = 'equip'">				<div>					<xsl:apply-templates select="." mode="form-attributes"/>					<xsl:apply-templates select="." mode="form-content"/>					<xsl:apply-templates select="." mode="form-name"/>				</div>			</xsl:when>			<xsl:otherwise>				<div>					<xsl:apply-templates select="." mode="form-attributes"/>					<xsl:apply-templates select="." mode="form-name"/>					<xsl:apply-templates select="." mode="form-content"/>				</div>			</xsl:otherwise>		</xsl:choose>	</xsl:template>		<xsl:template match="*[@template]" mode="form-content">		<xsl:choose>			<xsl:when test="@template = 'cur/max'">				<xsl:apply-templates select="*[1]" mode="form"/>				<xsl:text> / </xsl:text>				<xsl:apply-templates select="*[2]" mode="form"/>			</xsl:when>			<xsl:when test="@template = 'cur/max+mod'">				<xsl:apply-templates select="*[1]" mode="form"/>				<xsl:text> / </xsl:text>				<xsl:apply-templates select="*[2]" mode="form"/>				<xsl:text> + </xsl:text>				<xsl:apply-templates select="*[3]" mode="form"/>			</xsl:when>			<xsl:when test="@template = 'cur+mod/max'">				<xsl:apply-templates select="*[1]" mode="form"/>				<xsl:text> + </xsl:text>				<xsl:apply-templates select="*[3]" mode="form"/>				<xsl:text> / </xsl:text>				<xsl:apply-templates select="*[2]" mode="form"/>				<!--				<xsl:text> + </xsl:text>				<xsl:apply-templates select="*[4]" mode="form"/>				-->			</xsl:when>			<xsl:when test="@template = 'portrait'">				<!--				<button class="picker" type="button" contextmenu="amber-picker-portrait" onclick="AmberPicker.openPopup(arguments[0])" oncontextmenu="AmberPicker.openMenu(arguments[0])" data-picker-id="{@value}">					<img src="/getResource.php/amber/portraits/{@value}" alt="portrait#{@value}"/>				</button>				-->				<div role="button" tabindex="0" class="picker" 					contextmenu="amber-picker-portrait" onclick="AmberPicker.openPopup(arguments[0])">					<xsl:apply-templates select="." mode="form-picker"/>				</div>			</xsl:when>			<xsl:when test="@template = 'equip' or @template = 'item'">				<xsl:variable name="itemId" select="*[@class='ItemId']/@value"/>				<xsl:variable name="item" 	select="key('item', $itemId)"/>								<div role="button" tabindex="0" class="picker"					data-hover-text="{$item/@name}"					contextmenu="amber-picker-item" onclick="AmberPicker.openPopup(arguments[0])">					<xsl:if test="@template = 'equip'">						<xsl:attribute name="data-picker-filter-itemid"><xsl:value-of select="@name"/></xsl:attribute>					</xsl:if>					<xsl:apply-templates select="." mode="form-picker"/>				</div>			</xsl:when>			<xsl:when test="@template = 'table'">				<table>					<tbody>						<xsl:for-each select="*">							<tr>								<xsl:apply-templates select="." mode="form-attributes"/>								<th>									<xsl:apply-templates select="." mode="form-name"/>								</th>								<td>									<xsl:apply-templates select="." mode="form-content"/>								</td>							</tr>						</xsl:for-each>					</tbody>				</table>			</xsl:when>			<!--			<xsl:when test="@template = 'equip'">				<table>					<tbody>						<tr>							<td><xsl:apply-templates select="*[1]" mode="form"/></td>							<td><xsl:apply-templates select="*[2]" mode="form"/></td>							<td><xsl:apply-templates select="*[3]" mode="form"/></td>						</tr>						<tr>							<td><xsl:apply-templates select="*[4]" mode="form"/></td>							<td><xsl:apply-templates select="*[5]" mode="form"/></td>							<td><xsl:apply-templates select="*[6]" mode="form"/></td>						</tr>						<tr>							<td><xsl:apply-templates select="*[7]" mode="form"/></td>							<td><xsl:apply-templates select="*[8]" mode="form"/></td>							<td><xsl:apply-templates select="*[9]" mode="form"/></td>						</tr>					</tbody>				</table>			</xsl:when>			-->			<xsl:when test="@template = 'flex'">				<ul>					<xsl:for-each select="*">						<li>							<xsl:apply-templates select="." mode="form"/>						</li>					</xsl:for-each>				</ul>			</xsl:when>			<xsl:otherwise>				<xsl:apply-templates select="*" mode="form"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>		<!--	<xsl:template match="dictionary" mode="form">		<xsl:copy-of select="."/>		<dl>			<xsl:for-each select="option">				<dt><xsl:value-of select="@key"/></dt>				<dd><xsl:value-of select="@value"/></dd>			</xsl:for-each>		</dl>	</xsl:template>	-->		<xsl:template match="dictionary | group | list | mask" mode="form">		<div>			<xsl:apply-templates select="." mode="form-attributes"/>			<xsl:apply-templates select="." mode="form-name"/>						<xsl:apply-templates select="." mode="form-content"/>		</div>	</xsl:template>	<xsl:template match="group | list" mode="form-content">		<xsl:apply-templates select="*" mode="form"/>	</xsl:template>	<xsl:template match="mask" mode="form-content">		<ul>			<xsl:for-each select="*">				<li>					<xsl:apply-templates select="." mode="form"/>				</li>			</xsl:for-each>		</ul>	</xsl:template>		<xsl:template match="single | bit | select" mode="form">		<label>			<xsl:apply-templates select="." mode="form-attributes"/>			<xsl:apply-templates select="." mode="form-content"/>			<xsl:apply-templates select="." mode="form-name"/>		</label>	</xsl:template>	<xsl:template match="single" mode="form-content">		<input name="SaveData[{@id}]" value="{@value}">			<xsl:if test="@name">				<xsl:attribute name="class"><xsl:value-of select="@name"/></xsl:attribute>			</xsl:if>			<xsl:if test="@readonly">				<xsl:attribute name="readonly">readonly</xsl:attribute>			</xsl:if>			<xsl:choose>				<xsl:when test="@type = 'str'">					<xsl:attribute name="type">text</xsl:attribute>					<xsl:attribute name="maxlength"><xsl:value-of select="@length"/></xsl:attribute>				</xsl:when>				<xsl:when test="@type = 'int'">					<xsl:attribute name="type">number</xsl:attribute>					<xsl:attribute name="step">1</xsl:attribute>					<xsl:attribute name="min"><xsl:value-of select="@min"/></xsl:attribute>					<xsl:attribute name="max"><xsl:value-of select="@max"/></xsl:attribute>					<xsl:attribute name="size"><xsl:value-of select="@length"/></xsl:attribute>				</xsl:when>			</xsl:choose>		</input>	</xsl:template>	<xsl:template match="bit" mode="form-content">		<input type="checkbox" name="SaveData[{@id}_checkbox]">			<xsl:if test="@value &gt; 0">				<xsl:attribute name="checked">checked</xsl:attribute>			</xsl:if>		</input>		<input type="hidden" name="SaveData[{@id}]" value="_checkbox"/>	</xsl:template>		<xsl:template match="select" mode="form-content">		<xsl:variable name="node" select="."/>		<select name="SaveData[{@id}]">			<xsl:for-each select="key('dictionary-option', @dict)">				<option value="{@key}">					<xsl:if test="@key = $node/@value">						<xsl:attribute name="selected">selected</xsl:attribute>					</xsl:if>					<!--					<xsl:choose>						<xsl:when test="$node/@dict = 'Portrait'">							<xsl:attribute name="style">background-image:url('/getResource.php/amber/portraits/<xsl:value-of select="@val"/>');</xsl:attribute>						</xsl:when>						<xsl:when test="$node/@dict = 'ItemId'">							<xsl:attribute name="style">background-image:url('/getResource.php/amber/items/<xsl:value-of select="@key"/>');</xsl:attribute>						</xsl:when>					</xsl:choose>					-->					<xsl:value-of select="@val"/>				</option>			</xsl:for-each>		</select>	</xsl:template>	<xsl:template match="*" mode="form-attributes">		<xsl:if test="string-length(@class)">			<xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>		</xsl:if>		<xsl:if test="string-length(@template)">			<xsl:attribute name="data-template"><xsl:value-of select="@template"/></xsl:attribute>		</xsl:if>		<xsl:if test="string-length(@dict)">			<xsl:attribute name="data-dictionary"><xsl:value-of select="@dict"/></xsl:attribute>		</xsl:if>	</xsl:template>	<xsl:template match="*" mode="form-name">		<xsl:if test="string-length(@name)">			<span class="name">				<xsl:if test="string-length(@title)">					<xsl:attribute name="data-hover-text"><xsl:value-of select="@title"/></xsl:attribute>				</xsl:if>				<xsl:value-of select="@name"/>			</span>		</xsl:if>	</xsl:template>		<xsl:template match="group | list | mask" mode="form-picker">		<xsl:apply-templates select="*" mode="form-picker"/>	</xsl:template>	<xsl:template match="single | bit | select" mode="form-picker">		<div data-picker-value="{@value}">			<xsl:apply-templates select="." mode="form-attributes"/>			<xsl:apply-templates select="." mode="form-hidden"/>		</div>	</xsl:template>		<xsl:template match="bit" mode="form-hidden">		<xsl:if test="string-length(@id)">			<input type="checkbox" name="SaveData[{@id}_checkbox]" hidden="hidden">				<xsl:if test="@value &gt; 0">					<xsl:attribute name="checked">checked</xsl:attribute>				</xsl:if>			</input>			<input type="hidden" name="SaveData[{@id}]" value="_checkbox"/>		</xsl:if>	</xsl:template>	<xsl:template match="*" mode="form-hidden">		<xsl:if test="string-length(@id)">			<input type="hidden" name="SaveData[{@id}]" value="{@value}"/>		</xsl:if>	</xsl:template></xsl:stylesheet>