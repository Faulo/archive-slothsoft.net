<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:exsl="http://exslt.org/common"
	xmlns:func="http://exslt.org/functions"
	xmlns:str="http://exslt.org/strings"	xmlns:set="http://exslt.org/sets"
	xmlns:php="http://php.net/xsl"
	xmlns:save="http://schema.slothsoft.net/savegame/editor"
	extension-element-prefixes="exsl func str set php">
	
	<xsl:key name="dictionary-option" match="save:savegame.editor/save:dictionary/save:option" use="../@dictionary-id"/>	<xsl:key name="string-dictionary" match="save:group[@type='string-dictionary']/save:string" use="../@name"/>	
	<xsl:template match="save:savegame.editor">		<xsl:variable name="items" select="save:archive[@file-name='AM2_CPU'] | save:archive[@file-name='AM2_BLIT']//*[@name = 'items']/*/*"/>		<xsl:variable name="categories" select="set:distinct($items//*[@name = 'type']/@value)"/>		<xsl:for-each select="$categories">			<xsl:variable name="category" select="."/>			<category id="{.}" name="{key('dictionary-option', 'item-types')[@key = $category]/@val}">				<xsl:for-each select="$items">					<xsl:if test=".//*[@name = 'type']/@value = $category">						<xsl:apply-templates select="." mode="extract">							<xsl:with-param name="id" select="position()"/>						</xsl:apply-templates>					</xsl:if>				</xsl:for-each>			</category>		</xsl:for-each>
	</xsl:template>
	
	<xsl:template match="*" mode="extract">		<xsl:param name="id"/>		<!--		<item id="234" name="PERLMUTT KETTE" subtype="0" subsubtype="0" image-id="1" hands="0" fingers="0" armor="0" damage="0" magic-armor="0" magic-weapon="0" lp-max="0" sp-max="0" attribute-value="5" skill-value="0" price="0" weight="200" spell-id="0" charges-default="0" max-charges-by-spell="0" max-charges-by-shop="0" price-per-charge="0" type="Amulett" slot="Amulett" ranged-type="-" ammunition-type="-" attribute-type="Schnelligkeit" skill-type="Attacke" spell-type="Heilung" is-equippable="" gender="beide"><class name="Abenteurer"/><class name="Krieger"/><class name="Paladin"/><class name="Dieb"/><class name="Ranger"/><class name="Heiler"/><class name="Alchemist"/><class name="Mystiker"/><class name="Magier"/></item>		-->		<item id="{$id}">			<xsl:variable name="spell-id" select=".//*[@name = 'spell-id']/@value"/>			<xsl:variable name="spell-type" select=".//*[@name = 'spell-type']/@value"/>			<xsl:variable name="spell-dictionary">				<xsl:choose>					<xsl:when test="$spell-type = 0">						<xsl:value-of select="'spells-white'"/>					</xsl:when>					<xsl:when test="$spell-type = 1">						<xsl:value-of select="'spells-blue'"/>					</xsl:when>					<xsl:when test="$spell-type = 2">						<xsl:value-of select="'spells-green'"/>					</xsl:when>					<xsl:when test="$spell-type = 3">						<xsl:value-of select="'spells-black'"/>					</xsl:when>					<xsl:when test="$spell-type = 6">						<xsl:value-of select="'spells-misc'"/>					</xsl:when>				</xsl:choose>			</xsl:variable>						<xsl:apply-templates select=".//save:integer[@name != ''] | .//save:string" mode="attr"/>						<xsl:apply-templates select=".//*[@name = 'type']" mode="attr"/>			<xsl:apply-templates select=".//*[@name = 'hands']" mode="attr"/>			<xsl:apply-templates select=".//*[@name = 'fingers']" mode="attr"/>			<xsl:apply-templates select=".//*[@name = 'slot']" mode="attr"/>			<xsl:apply-templates select=".//*[@name = 'ammunition-type']" mode="attr"/>			<xsl:apply-templates select=".//*[@name = 'ranged-type']" mode="attr"/>						<xsl:if test=".//*[@name = 'attribute-value']/@value &gt; 0">				<xsl:apply-templates select=".//*[@name = 'attribute-type']" mode="attr"/>			</xsl:if>			<xsl:if test=".//*[@name = 'skill-value']/@value &gt; 0">				<xsl:apply-templates select=".//*[@name = 'skill-type']" mode="attr"/>			</xsl:if>						<xsl:if test="$spell-id &gt; 0">				<xsl:attribute name="spell-type">					<xsl:value-of select="key('string-dictionary', 'spell-types')[position() = $spell-type + 1]/@value"/>				</xsl:attribute>				<xsl:attribute name="spell-name">					<xsl:value-of select="key('string-dictionary', $spell-dictionary)[position() = $spell-id]/@value"/>				</xsl:attribute>			</xsl:if>			<xsl:attribute name="gender">				<xsl:choose>					<xsl:when test=".//*[@name = 'male']/@value &gt; .//*[@name = 'female']/@value">m√§nnlich</xsl:when>					<xsl:when test=".//*[@name = 'male']/@value &lt; .//*[@name = 'female']/@value">weiblich</xsl:when>					<xsl:otherwise>beide</xsl:otherwise>				</xsl:choose>			</xsl:attribute>			<xsl:for-each select=".//*[@name = 'properties']/*[@value != '']">				<xsl:attribute name="is-{@name}"/>			</xsl:for-each>			<xsl:for-each select=".//*[@name = 'classes']/*[@value != '']">				<class name="{@name}"/>			</xsl:for-each>		</item>
	</xsl:template>		<xsl:template match="save:integer | save:string" mode="attr">		<xsl:attribute name="{@name}"><xsl:value-of select="normalize-space(@value)"/></xsl:attribute>	</xsl:template>		<xsl:template match="save:select" mode="attr">		<xsl:variable name="option" select="key('dictionary-option', @dictionary-ref)[@key = current()/@value]"/>		<xsl:attribute name="{@name}"><xsl:value-of select="$option/@title | $option/@val[not($option/@title)]"/></xsl:attribute>	</xsl:template>
</xsl:stylesheet>