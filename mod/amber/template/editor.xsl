<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0"	xmlns="http://www.w3.org/1999/xhtml"	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"	xmlns:exsl="http://exslt.org/common"	xmlns:func="http://exslt.org/functions"	xmlns:str="http://exslt.org/strings"	xmlns:save="http://schema.slothsoft.net/savegame"	extension-element-prefixes="exsl func str">		<xsl:import href="/getTemplate.php/amber/itemlist"/>	<xsl:import href="/getTemplate.php/amber/editor.savegame"/>		<!--	<xsl:import href="/getTemplate.php/amber/editor.savegame"/>		<xsl:key name="item" match="item" use="@id"/>		<xsl:variable name="items" select="/data/*[@data-cms-name = 'items']/fragment"/>	<xsl:variable name="portraits" select="/data/*[@data-cms-name = 'portraits']/fragment"/>	-->		<xsl:template match="/data">		<div class="Amber Editor" ><!--ng-app="Amber"-->			<script type="application/javascript"><![CDATA[var savegameEditor;window.addEventListener(	"DOMContentLoaded",	function(eve) {		savegameEditor = new SavegameEditor(document.querySelector(".Amber"));	},	false);			]]></script>			<xsl:apply-templates select="*[@data-cms-name='editor']"/>			<div class="pickers">				<xsl:apply-templates select="*[@data-cms-name='items']" mode="picker"/>				<xsl:apply-templates select="*[@data-cms-name='portraits']" mode="picker"/>			</div>			<div class="itemlist">				<xsl:apply-templates select="*[@data-cms-name='items']" mode="itemlist"/>			</div>			<div class="portraitlist">				<xsl:apply-templates select="*[@data-cms-name='portraits']" mode="itemlist"/>			</div>			<div class="popup" onclick="savegameEditor.closePopup(arguments[0])"/>		</div>	</xsl:template>		<xsl:template match="*[@data-cms-name='editor']">		<xsl:for-each select="save:savegame.editor">			<xsl:variable name="selectedArchives" select="save:archive[*]"/>			<details open="open">				<summary><h2>Einstellungen</h2></summary>				<div>					<form method="POST" action="./?SaveName={@save-id}" enctype="multipart/form-data">						<div>							<h3 class="name">Aktuelle Spielstand-ID</h3>							<input type="text" name="save[editor][save-id]" value="{@save-id}" readonly="readonly" size="40"/>						</div>						<div>							<button class="yellow" type="submit" name="DownloadXML">XML herunterladen</button>						</div>						<div>							<h3 class="name">Bearbeitbare Dateien</h3>							<table>								<thead>									<tr class="gray">										<td>Dateiname</td>										<td>Letzte Änderung</td>										<td>Eigene Version Hochladen</td>									</tr>								</thead>								<tbody>									<xsl:for-each select="save:archive">										<tr>											<td>												<label class="name">													<input type="radio" name="save[editor][archives][]" value="{@file-name}">														<xsl:if test="@file-name = $selectedArchives/@file-name">															<xsl:attribute name="checked">checked</xsl:attribute>														</xsl:if>													</input>													<xsl:text> </xsl:text>													<xsl:value-of select="@file-name"/>												</label>											</td>											<td><xsl:value-of select="@file-time"/></td>											<td><input type="file" name="save[{@file-name}]"/></td>										</tr>									</xsl:for-each>								</tbody>								<tfoot>									<tr>										<td colspan="2">											<button class="yellow" type="submit">Ausgewählte Datei öffnen</button>										</td>										<td>											<button class="yellow" type="submit">Dateien hochladen</button>										</td>									</tr>								</tfoot>							</table>						</div>					</form>				</div>			</details>					<xsl:for-each select="$selectedArchives">				<details data-archive-filename="{@file-name}" open="open">					<summary>						<h2>Datei bearbeiten: <span class="green"><xsl:value-of select="@file-name"/></span></h2>					</summary>					<xsl:apply-templates select="." mode="form"/>				</details>			</xsl:for-each>		</xsl:for-each>	</xsl:template>		<xsl:template match="*[@data-cms-name]" mode="itemlist">		<xsl:for-each select=".//*[@id]">			<template id="amber-picker-{local-name()}-{@id}">				<xsl:apply-templates select="." mode="itemlist"/>			</template>			<template id="{local-name()}-{@id}">				<xsl:copy-of select="."/>			</template>		</xsl:for-each>	</xsl:template>		<xsl:template match="*[@data-cms-name='portraits']" mode="picker">		<menu type="context" id="amber-picker-portrait" onshow="savegameEditor.openMenu(arguments[0])">			<menuitem label="Ambermoon Portrait Picker" icon="/getResource.php/slothsoft/favicon"/>			<xsl:call-template name="menu.items">				<xsl:with-param name="fragment" select="fragment"/>				<xsl:with-param name="name" select="'portrait'"/>			</xsl:call-template>		</menu>	</xsl:template>	<xsl:template match="*[@data-cms-name='items']" mode="picker">		<menu type="context" id="amber-picker-item" onshow="savegameEditor.openMenu(arguments[0])">			<menuitem label="Ambermoon Item Picker" icon="/getResource.php/slothsoft/favicon"/>			<menu label="Gegenstand">				<xsl:call-template name="menu.items">					<xsl:with-param name="fragment" select="fragment"/>					<xsl:with-param name="name" select="'item-id'"/>				</xsl:call-template>			</menu>			<menu label="Anzahl">				<xsl:for-each select="str:split(str:padding(101), '')">					<xsl:variable name="val">						<xsl:choose>							<xsl:when test="position() = last()">								<xsl:value-of select="255"/>							</xsl:when>							<xsl:otherwise>								<xsl:value-of select="position() - 1"/>							</xsl:otherwise>						</xsl:choose>					</xsl:variable>					<menuitem type="radio" radiogroup="item-amount"						label="{$val}"						data-picker-name="item-amount" data-picker-value="{$val}"						onclick="savegameEditor.closeMenu(arguments[0])"/>				</xsl:for-each>			</menu>			<menuitem data-picker-name="identified"				type="checkbox"				label="Ist Identifiziert"				onclick="savegameEditor.closeMenu(arguments[0])"/>			<menuitem data-picker-name="broken"				type="checkbox"				label="Ist Zerbrochen"				onclick="savegameEditor.closeMenu(arguments[0])"/>			<menu label="Magische Ladungen">				<xsl:for-each select="str:split(str:padding(101), '')">					<xsl:variable name="val">						<xsl:choose>							<xsl:when test="position() = last()">								<xsl:value-of select="255"/>							</xsl:when>							<xsl:otherwise>								<xsl:value-of select="position() - 1"/>							</xsl:otherwise>						</xsl:choose>					</xsl:variable>					<menuitem type="radio" radiogroup="item-charge"						label="{$val}"						data-picker-name="item-charge" data-picker-value="{$val}"						onclick="savegameEditor.closeMenu(arguments[0])"/>				</xsl:for-each>			</menu>		</menu>	</xsl:template>		<xsl:template name="menu.items">		<xsl:param name="fragment"/>		<xsl:param name="name"/>				<xsl:for-each select="$fragment/category">			<menu label="{@name}">				<xsl:for-each select="*">					<!--icon="/getResource.php/amber/items/{@id}"-->					<menuitem label="{@name}"						type="radio" radiogroup="{$name}"						data-picker-name="{$name}" data-picker-value="{@id}" data-picker-filter-item-id="{@slot}"						onclick="savegameEditor.closeMenu(arguments[0])"/>				</xsl:for-each>			</menu>		</xsl:for-each>	</xsl:template>																																																																																																																				<!--	<xsl:template match="save:savegame.editor">		<xsl:for-each select="save:archive">			<details ontoggle="AmberForm.loadForm(arguments[0])" data-archive-filename="{@file-name}">				<summary>					<h2>Datei bearbeiten: <span class="green"><xsl:value-of select="@file-name"/></span></h2>				</summary>			</details>		</xsl:for-each>	</xsl:template>	-->		<xsl:template match="/data2">		<div class="Amber Editor">			<script type="application/javascript"><![CDATA[window.addEventListener(	"DOMContentLoaded",	function(eve) {		let editor = new SavegameEditor(document.querySelector(".Amber"));	},	false);var AmberPicker = {	closePopup : function(eve) {		try {			let popupNode = document.querySelector(".Amber .popup");			if (popupNode) {				while (popupNode.hasChildNodes()) {					popupNode.removeChild(popupNode.lastChild);				}			}		} catch(e) {			alert(e);		}	},	openPopup : function(eve) {		try {			this.closePopup(eve);						let buttonNode = eve.currentTarget;			let menuNode = buttonNode.contextMenu;			let popupNode = document.querySelector(".Amber .popup");			if (popupNode) {				let entryType = buttonNode.getAttribute("contextmenu");				let entryId = buttonNode.querySelector("input").value;				if (entryType && entryId) {					let entryNode = document.getElementById(entryType + "-" + entryId);					if (entryNode && entryNode.content) {						let articleNode = document.importNode(entryNode.content, true);						if (articleNode) {							popupNode.appendChild(articleNode);						}					}				}			}		} catch(e) {			alert(e);		}	},	openMenu : function(eve) {		try {			let pickerNode = document.activeElement;			let menuNode = eve.currentTarget;						let targetNodeList = pickerNode.querySelectorAll("*[data-picker-value]");						for (let i = 0; i < targetNodeList.length; i++) {				let targetNode = targetNodeList[i];								let name = targetNode.getAttribute("data-picker-name");				let value = targetNode.getAttribute("data-picker-value");								let itemNode = menuNode.querySelector("*[data-picker-name='" + name + "']");								if (itemNode) {					switch (itemNode.type) {						case "checkbox":							itemNode.checked = (value !== "");							break;						case "radio":							let filterName = "data-picker-filter-" + name.toLowerCase();							let itemNodeList = menuNode.querySelectorAll("*[data-picker-name='" + name + "']");							itemNodeList.forEach(								(node) => {									node.checked = false;									node.disabled = false;									node.parentNode.hidden = false;								},							);														if (pickerNode.hasAttribute(filterName)) {								let filterValue = pickerNode.getAttribute(filterName);								itemNodeList.forEach(									(node) => {										node.parentNode.hidden = true;									}								);								itemNodeList.forEach(									(node) => {										if (filterValue === node.getAttribute(filterName)) {											node.parentNode.hidden = false;										} else {											node.disabled = true;										}									},								);							}														itemNode = menuNode.querySelector("*[data-picker-name='" + name + "'][data-picker-value='" + value + "']");														if (itemNode) {								itemNode.checked = true;							}							break;						default:							break;					}				}			}		} catch(e) {			alert(e);		}	},	closeMenu : function(eve) {		try {			let pickerNode = document.activeElement;			let itemNode = eve.currentTarget;						let name = itemNode.getAttribute("data-picker-name");						let targetNode = pickerNode.querySelector("*[data-picker-name='" + name + "']");			let inputNode = pickerNode.querySelector("*[data-picker-name='" + name + "'] input");						if (targetNode && inputNode) {				let value;				switch (itemNode.type) {					case "checkbox":						value = itemNode.checked;												targetNode.setAttribute("data-picker-value", value ? "1" : "");						inputNode.checked = value;						break;					case "radio":					default:						value = itemNode.getAttribute("data-picker-value");												targetNode.setAttribute("data-picker-value", value);						inputNode.value = value;						break;				}			}						switch(name) {				case "item-id":					pickerNode.setAttribute("data-hover-text", itemNode.getAttribute("label"));					break;			}		} catch(e) {			alert(e);		}	},};var AmberForm = {	templateFile : "/getTemplate.php/amber/editor.savegame",	loadForm : function(eve) {		try {			let detailsNode = eve.currentTarget;			if (!detailsNode.hasAttribute("data-form")) {				detailsNode.setAttribute("data-form", "loading");				let filename = detailsNode.getAttribute("data-archive-filename");				let dataNode = document.getElementById("amber-savegame").content.firstChild;								let req = new XMLHttpRequest();				req.open("GET", this.templateFile, true);				req.addEventListener(					"load",					(eve) => {						try {							if (req.responseXML) {								let xslt = new XSLTProcessor();								xslt.importStylesheet(req.responseXML);								xslt.setParameter("", "ARCHIVE_FILENAME", filename);								let fragment = xslt.transformToFragment(dataNode, document);																detailsNode.appendChild(fragment);								detailsNode.setAttribute("data-form", "done");																new SavegameEditor(detailsNode);							}						} catch(e) {							alert(e);						}					},					false				);				req.send();			}		} catch(e) {			alert(e);		}	},};			]]></script>			<!--			<style type="text/css">				<xsl:for-each select="//dictionary/entry[@image-uri]">					<xsl:variable name="selector" select="concat('*[data-dictionary=&quot;', @name, '&quot;]')"/>					<xsl:for-each select="key('dictionary-option', @name)">						<xsl:value-of select="concat($selector, '[data-picker-value=&quot;', @key, '&quot;]::after { background-image: url(', ../@image-uri, @key, '); }')"/>					</xsl:for-each>				</xsl:for-each>			</style>						-->						<!--			<form action="upload.php" method="post" enctype="multipart/form-data">				<div class="Upload">					<table>						<tr>							<th colspan="2">Spielstand hochladen</th>						</tr>						<tr>							<th>Party_char.amb</th>							<td><input name="FILE_CHARS" type="file" class="yellow" /></td>						</tr>						<tr>							<th>Party_data.sav</th>							<td><input name="FILE_PARTY" type="file" class="yellow" /></td>						</tr>						<tr>							<th colspan="2" class="Submit"><input type="submit" value="Hochladen" /></th>						</tr>					</table>				</div>			</form>			-->						<xsl:apply-templates select="*[@data-cms-name='editor']/save:savegame.editor"/>						<div class="pickers">				<xsl:apply-templates select="*[@data-cms-name='items']" mode="picker"/>				<xsl:apply-templates select="*[@data-cms-name='portraits']" mode="picker"/>			</div>			<div class="savegame">				<template id="amber-savegame">					<xsl:copy-of select="*[@data-cms-name='editor']/save:savegame.editor"/>				</template>			</div>			<div class="itemlist">				<xsl:apply-templates select="*[@data-cms-name='itemlist-content']//*[@data-item-id]"/>			</div>			<div class="portraitlist">				<xsl:apply-templates select="*[@data-cms-name='portraitlist-content']//*[@data-portrait-id]"/>			</div>			<div class="popup" onclick="AmberPicker.closePopup(arguments[0])"/>		</div>	</xsl:template></xsl:stylesheet>